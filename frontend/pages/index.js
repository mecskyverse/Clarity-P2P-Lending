//THis is the main page of the project where all the components creates a page.
import Head from "next/head";
import { useState } from "react";
import ConnectWallet from "../components/ConnectWallet";
import ListOfUser  from "../components/ListOfUser";
import styles from "../styles/Home.module.css";
import ContractCallGm from "../components/ContractCallGm";
import { useConnect } from "@stacks/connect-react";

import { StacksMocknet } from "@stacks/network";

import {
  AnchorMode,
  standardPrincipalCV,
  makeStandardSTXPostCondition,
  FungibleConditionCode
} from "@stacks/transactions";
import { userSession } from "../components/ConnectWallet";

export default function Home() {
  const [users, setUsers] = useState([]); // It keeps track of the user to show if any user is added
  const { doContractCall } = useConnect(); // Helps in calling a function in a contract

  //Function to add new User in the contract from which we can send or take the loans.
  function handleUser(newUser) {
    const userAdd = standardPrincipalCV(newUser) //passing the parameter of newUser address
    console.log("In handle gm")
    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;
    const postConditionCode = FungibleConditionCode.LessEqual;
    const postConditionAmount = 1 * 1000000;
    doContractCall({
      network: new StacksMocknet(),
      anchorMode: AnchorMode.Any,
      contractAddress: "ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM",
      contractName: "gm",
      functionName: "add-user", //name of the function this doContractCall is calling the contract with all the details
      functionArgs: [userAdd],
      postConditions: [
        makeStandardSTXPostCondition(
          postConditionAddress,
          postConditionCode,
          postConditionAmount
        )
      ],
      //defining on finish conditions which will help post the transaction has been processed
      onFinish: (data) => {
        console.log("onFinish:", data);
        console.log("Explorer:", `localhost:8000/txid/${data.txId}?chain=testnet`)
      },
      onCancel: () => {
        console.log("onCancel:", "Transaction was canceled");
      },
    });
  }


  // An helper function to add user in smart contract
  function addUser(){
    
    let newAddress = window.prompt("enter the user address")
    handleUser(newAddress)
    const newArray = [...users, newAddress];//this will keep the list of users updated 
  
    setUsers(newArray);
    
    console.log(users)

  }


  return (
    <div className={styles.container}>
     
      <Head>
        <title>P2P Lending</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
          {/* calling contractCallGm Component which helps to show the token balance */}
          <ContractCallGm/>
      <main className={styles.main}>
        <h2 className={styles.title}>Welcome To PEER to PEER Lending Smart Contract</h2>
          {/* Calling the connectWallet component helps in connecting hiro wallet with the dapp */}
          <ConnectWallet />
        
        <div className={styles.components}>
          {/* This button will create new user after we click on it */}
          <button className="Connect" onClick={() => addUser()}>
            ADD USER
          </button>

          <ListOfUser user = {users}/>
          
        </div>
        
      </main>
      
    </div>
  )
}