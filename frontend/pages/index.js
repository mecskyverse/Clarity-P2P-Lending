import Head from "next/head";
import { useCallback, useEffect, useState } from "react";
import ConnectWallet from "../components/ConnectWallet";
import ListOfUser  from "../components/ListOfUser";
import styles from "../styles/Home.module.css";
import ContractCallGm from "../components/ContractCallGm";
import { useConnect } from "@stacks/connect-react";

import { StacksMocknet } from "@stacks/network";

import {
  AnchorMode,
  standardPrincipalCV,
  callReadOnlyFunction,
  makeStandardSTXPostCondition,
  FungibleConditionCode
} from "@stacks/transactions";
import { userSession } from "../components/ConnectWallet";

export default function Home() {
  const [users, setUsers] = useState([]);
  const { doContractCall } = useConnect();

  function handleUser(newUser) {
    const userAdd = standardPrincipalCV(newUser)
    console.log("In handle gm")
    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;
    const postConditionCode = FungibleConditionCode.LessEqual;
    const postConditionAmount = 1 * 1000000;
    doContractCall({
      network: new StacksMocknet(),
      anchorMode: AnchorMode.Any,
      contractAddress: "ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM",
      contractName: "gm",
      functionName: "add-user",
      functionArgs: [userAdd],
      postConditions: [
        makeStandardSTXPostCondition(
          postConditionAddress,
          postConditionCode,
          postConditionAmount
        )
      ],
      onFinish: (data) => {
        console.log("onFinish:", data);
        console.log("Explorer:", `localhost:8000/txid/${data.txId}?chain=testnet`)
      },
      onCancel: () => {
        console.log("onCancel:", "Transaction was canceled");
      },
    });
  }



  function addUser(){
    
    let newAddress = window.prompt("enter the user address")
    handleUser(newAddress)
    const newArray = [...users, newAddress];
  
    setUsers(newArray);
    
    console.log(users)

  }


  return (
    <div className={styles.container}>
     
      <Head>
        <title>P2P Lending</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
          <ContractCallGm/>
      <main className={styles.main}>
        <h2 className={styles.title}>Welcome To PEER to PEER Lending Smart Contract</h2>
          <ConnectWallet />
        
        <div className={styles.components}>

          <button className="Connect" onClick={() => addUser()}>
            ADD USER
          </button>

          <ListOfUser user = {users}/>
          {/* <ContractGetBalance /> */}
        </div>
        
      </main>
      
    </div>
  )
}